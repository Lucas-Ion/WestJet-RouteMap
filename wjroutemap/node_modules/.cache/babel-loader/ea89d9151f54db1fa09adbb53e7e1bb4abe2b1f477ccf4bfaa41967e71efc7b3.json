{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"leaflet/dist/leaflet.css\";\nimport { MarkerCluster } from \"./MarkerCluster.vue\";\nimport { LMap, LTileLayer, LMarker, LIcon, LTooltip, LPopup } from \"@vue-leaflet/vue-leaflet\";\nimport westjet from '../assets/westjet.png';\nexport default {\n  name: 'DestMap',\n  props: {\n    dests: Array\n  },\n  components: {\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon,\n    LPopup,\n    LTooltip,\n    MarkerCluster\n  },\n  data() {\n    return {\n      url: 'https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db',\n      attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      zoom: 4,\n      center: [47.313220, -1.319482],\n      //default\n      markerLatLngBob: [47.313220, -17.319482],\n      icon: westjet,\n      iconSize: [40, 25]\n    };\n  },\n  methods: {\n    latLng: function (lat, lng) {\n      return [lat, lng];\n    },\n    getLocation: function () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          var latitude = position.coords.latitude;\n          var longitude = position.coords.longitude;\n          this.center = [latitude, longitude];\n        });\n      }\n    },\n    // dispPrice: async function (cityCode){\n    //   const result = await this.getPrice(cityCode);\n    //   console.log(result)\n    //   return result;\n\n    // },\n    getPrice: function (destination) {\n      let route = \"YYC\" + destination;\n      let value = \"\";\n      const axios = require('axios');\n      const params = new URLSearchParams();\n      params.append('o', 'YYC');\n      //console.log(destination)\n      params.append('d', destination);\n      //params.append('sourceCountryCode', 'CA');\n      params.append('rangeStartOffset', '0');\n      params.append('rangeEndOffset', '60');\n      const response = axios.get('https://api.westjet.com/price-points/v1/retail', {\n        params: params,\n        headers: {\n          'accept': 'application/json'\n        }\n      }).then(response => {\n        value = response.data[route][0].price;\n      }).catch(error => {\n        console.log(error);\n      });\n      if (value == 'undefined') {\n        value = 'Price Not Available';\n      }\n\n      //console.log(route + \" \" + value)\n      return value;\n    },\n    async onMarkerClusterReady(markerCluster) {\n      const L = await import(\"leaflet/dist/leaflet-src.esm\");\n      await this.$nextTick();\n      function r(min, max) {\n        return Math.random() * (max - min) + min;\n      }\n      let markers = [];\n      for (let i = 0; i < 50000; i++) {\n        const title = `marker ${i}`;\n        const marker = L.marker(L.latLng(r(53.82477192, 53.92365592), r(27.5078027, 27.70640622)), {\n          title: title\n        });\n        marker.bindPopup(title);\n        markers.push(marker);\n      }\n      markerCluster.addLayers(markers);\n    },\n    async onLeafletReady() {\n      this.leafletObject = this.$refs.map.leafletObject;\n      this.leafletReady = true;\n    }\n  },\n  mounted() {\n    this.getLocation();\n  }\n};","map":{"version":3,"mappings":"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","names":["MarkerCluster","LMap","LTileLayer","LMarker","LIcon","LTooltip","LPopup","westjet","name","props","dests","Array","components","data","url","attribution","zoom","center","markerLatLngBob","icon","iconSize","methods","latLng","lat","lng","getLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","getPrice","destination","route","value","axios","require","params","URLSearchParams","append","response","get","headers","then","price","catch","error","console","log","onMarkerClusterReady","markerCluster","L","$nextTick","r","min","max","Math","random","markers","i","title","marker","bindPopup","push","addLayers","onLeafletReady","leafletObject","$refs","map","leafletReady","mounted"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/src/components/DestMap.vue"],"sourcesContent":["<template>\n  <div style=\"height:1000px; width:1300px\">\n \n \n    <l-map \n    \n    ref=\"map\"\n    v-bind:max-zoom=\"19\"\n    v-bind:zoomAnimation=\"true\"\n    v-bind:markerZoomAnimation=\"true\"\n    v-bind:zoom=\"zoom\"\n    v-bind:center=\"{ lat: 51.289404225298256, lng: 9.697202050919614 }\"\n    v-on:ready=\"onLeafletReady\"\n    >\n\n      <l-tile-layer\n        url=\"https://tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db\"\n        layer-type=\"base\" name=\"OpenStreetMap\"></l-tile-layer>\n        <marker-cluster\n        :options=\"{ showCoverageOnHover: false, chunkedLoading: true }\"\n      >\n\n      <marker-cluster\n        :options=\"{\n          removeOutsideVisibleBounds: true,\n          chunkedLoading: true,\n        }\"\n        @ready=\"onMarkerClusterReady\"\n      />\n\n      <l-marker :key=\"index\" v-for=\"(dest, index) in dests\" :lat-lng=\"latLng(dest.latitude, dest.longitude)\">\n        <l-icon :icon-size=\"iconSize\" :icon-url=\"icon\"></l-icon>\n        <l-popup> You have selected {{ dest.name }}'s airport <br>\n         \n          Price: {{ getPrice(dest.code) }}\n        </l-popup>\n        <l-tooltip>\n          {{ dest.name }}, {{ dest.countryName }}, {{getPrice(dest.code)}}</l-tooltip>\n\n      </l-marker>\n      </marker-cluster>\n    </l-map>\n  </div>\n </template>\n  <script>\n import \"leaflet/dist/leaflet.css\";\n import { MarkerCluster } from \"./MarkerCluster.vue\";\n\n import {\n  LMap,\n  LTileLayer,\n  LMarker,\n  LIcon,\n  LTooltip,\n  LPopup,\n } from \"@vue-leaflet/vue-leaflet\";\n import westjet from '../assets/westjet.png'\n\n export default {\n  name: 'DestMap',\n  props: {\n    dests: Array\n  },\n  components: {\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon,\n    LPopup,\n    LTooltip,\n    MarkerCluster,\n  },\n  data() {\n    return {\n      url: 'https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db',\n      attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      zoom: 4,\n      center: [47.313220, -1.319482], //default\n      markerLatLngBob: [47.313220, -17.319482],\n      icon: westjet,\n      iconSize: [40, 25],\n    };\n  },\n  methods: {\n    latLng: function (lat, lng) {\n \n \n      return [lat, lng]\n    },\n    getLocation: function () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          var latitude = position.coords.latitude;\n          var longitude = position.coords.longitude;\n          this.center = [latitude, longitude]\n        });\n      }\n    },\n    // dispPrice: async function (cityCode){\n    //   const result = await this.getPrice(cityCode);\n    //   console.log(result)\n    //   return result;\n \n    // },\n    getPrice: function (destination) {\n \n \n      let route = \"YYC\"+ destination\n \n \n      let value = \"\"\n \n \n      const axios = require('axios');\n \n \n      const params = new URLSearchParams();\n      params.append('o', 'YYC');\n      //console.log(destination)\n      params.append('d', destination);\n      //params.append('sourceCountryCode', 'CA');\n      params.append('rangeStartOffset', '0');\n      params.append('rangeEndOffset', '60');\n\n     \n \n      const response = axios.get('https://api.westjet.com/price-points/v1/retail', {\n        params: params,\n        headers: {\n          'accept': 'application/json'\n        }\n      }).then(response => {\n        value = (response.data[route][0].price);\n      }).catch(error => {\n        console.log(error)\n      });\n \n      if (value == 'undefined'){\n        value = 'Price Not Available'\n      }\n      \n      //console.log(route + \" \" + value)\n      return value;\n    },\n    async onMarkerClusterReady(markerCluster) {\n      const L = await import(\"leaflet/dist/leaflet-src.esm\");\n\n      await this.$nextTick();\n\n      function r(min, max) {\n        return Math.random() * (max - min) + min;\n      }\n      let markers = [];\n      for (let i = 0; i < 50000; i++) {\n        const title = `marker ${i}`;\n        const marker = L.marker(\n          L.latLng(r(53.82477192, 53.92365592), r(27.5078027, 27.70640622)),\n          { title: title }\n        );\n        marker.bindPopup(title);\n        markers.push(marker);\n      }\n\n      markerCluster.addLayers(markers);\n    },\n\n    async onLeafletReady() {\n      this.leafletObject = this.$refs.map.leafletObject;\n      this.leafletReady = true;\n    },\n  },\n  mounted() {\n    this.getLocation()\n\n  },\n };\n </script>\n  <style>\n .leaflet-container {\n  border-radius: 25px;\n }\n </style>\n \n \n   \n   \n \n "]},"metadata":{},"sourceType":"module","externalDependencies":[]}