{"ast":null,"code":"import { onMounted, ref, provide, inject, nextTick } from \"vue\";\nimport { remapEvents, propsBinder, debounce, WINDOW_OR_GLOBAL, GLOBAL_LEAFLET_OPT } from \"../utils.js\";\nimport { markerProps, setupMarker } from \"../functions/marker\";\nimport { render } from \"../functions/layer\";\n\n/**\n * Marker component, lets you add and personalize markers on the map\n */\nexport default {\n  name: \"LMarker\",\n  props: markerProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const ready = ref(false);\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n    provide(\"canSetParentHtml\", () => !!leafletRef.value.getElement());\n    provide(\"setParentHtml\", html => leafletRef.value.getElement().innerHTML = html);\n    provide(\"setIcon\", newIcon => leafletRef.value.setIcon && leafletRef.value.setIcon(newIcon));\n    const {\n      options,\n      methods\n    } = setupMarker(props, leafletRef, context);\n    if (options.icon === undefined) {\n      // If the options object has a property named 'icon', then Leaflet will overwrite\n      // the default icon with it for the marker, _even if it is undefined_.\n      // This leads to the issue discussed in https://github.com/vue-leaflet/vue-leaflet/issues/130\n      delete options.icon;\n    }\n    onMounted(async () => {\n      const {\n        marker,\n        DomEvent\n      } = useGlobalLeaflet ? WINDOW_OR_GLOBAL.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      leafletRef.value = marker(props.latLng, options);\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n      leafletRef.value.on(\"move\", debounce(methods.latLngSync, 100));\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n    return {\n      ready,\n      leafletObject: leafletRef\n    };\n  },\n  render() {\n    return render(this.ready, this.$slots);\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,GAAG,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAO,QAAS,KAAK;AAC/D,SACEC,WAAW,EACXC,WAAW,EACXC,QAAQ,EACRC,gBAAgB,EAChBC,kBAAkB,QACb,aAAa;AACpB,SAASC,WAAW,EAAEC,WAAU,QAAS,qBAAqB;AAC9D,SAASC,MAAK,QAAS,oBAAoB;;AAE3C;;;AAGA,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAEJ,WAAW;EAClBK,KAAK,CAACD,KAAK,EAAEE,OAAO,EAAE;IACpB,MAAMC,UAAS,GAAIhB,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAMiB,KAAI,GAAIjB,GAAG,CAAC,KAAK,CAAC;IAExB,MAAMkB,gBAAe,GAAIhB,MAAM,CAACM,kBAAkB,CAAC;IACnD,MAAMW,QAAO,GAAIjB,MAAM,CAAC,UAAU,CAAC;IAEnCD,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAACe,UAAU,CAACI,KAAK,CAACC,UAAU,EAAE,CAAC;IAClEpB,OAAO,CACL,eAAe,EACdqB,IAAI,IAAMN,UAAU,CAACI,KAAK,CAACC,UAAU,EAAE,CAACE,SAAQ,GAAID,IAAI,CAC1D;IACDrB,OAAO,CACL,SAAS,EACRuB,OAAO,IAAKR,UAAU,CAACI,KAAK,CAACK,OAAM,IAAKT,UAAU,CAACI,KAAK,CAACK,OAAO,CAACD,OAAO,EAC1E;IACD,MAAM;MAAEE,OAAO;MAAEC;IAAQ,IAAIjB,WAAW,CAACG,KAAK,EAAEG,UAAU,EAAED,OAAO,CAAC;IACpE,IAAIW,OAAO,CAACE,IAAG,KAAMC,SAAS,EAAE;MAC9B;MACA;MACA;MACA,OAAOH,OAAO,CAACE,IAAI;IACrB;IAEA7B,SAAS,CAAC,YAAY;MACpB,MAAM;QAAE+B,MAAM;QAAEC;MAAS,IAAIb,gBAAe,GACxCX,gBAAgB,CAACyB,IACjB,MAAM,MAAM,CAAC,8BAA8B,CAAC;MAChDhB,UAAU,CAACI,KAAI,GAAIU,MAAM,CAACjB,KAAK,CAACoB,MAAM,EAAEP,OAAO,CAAC;MAEhD,MAAMQ,SAAQ,GAAI9B,WAAW,CAACW,OAAO,CAACoB,KAAK,CAAC;MAC5CJ,QAAQ,CAACK,EAAE,CAACpB,UAAU,CAACI,KAAK,EAAEc,SAAS,CAAC;MAExClB,UAAU,CAACI,KAAK,CAACgB,EAAE,CAAC,MAAM,EAAE9B,QAAQ,CAACqB,OAAO,CAACU,UAAU,EAAE,GAAG,CAAC,CAAC;MAC9DhC,WAAW,CAACsB,OAAO,EAAEX,UAAU,CAACI,KAAK,EAAEP,KAAK,CAAC;MAC7CM,QAAQ,CAAC;QACP,GAAGN,KAAK;QACR,GAAGc,OAAO;QACVW,aAAa,EAAEtB,UAAU,CAACI;MAC5B,CAAC,CAAC;MACFH,KAAK,CAACG,KAAI,GAAI,IAAI;MAClBjB,QAAQ,CAAC,MAAMY,OAAO,CAACwB,IAAI,CAAC,OAAO,EAAEvB,UAAU,CAACI,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;IAEF,OAAO;MAAEH,KAAK;MAAEqB,aAAa,EAAEtB;IAAW,CAAC;EAC7C,CAAC;EACDL,MAAM,GAAG;IACP,OAAOA,MAAM,CAAC,IAAI,CAACM,KAAK,EAAE,IAAI,CAACuB,MAAM,CAAC;EACxC;AACF,CAAC","names":["onMounted","ref","provide","inject","nextTick","remapEvents","propsBinder","debounce","WINDOW_OR_GLOBAL","GLOBAL_LEAFLET_OPT","markerProps","setupMarker","render","name","props","setup","context","leafletRef","ready","useGlobalLeaflet","addLayer","value","getElement","html","innerHTML","newIcon","setIcon","options","methods","icon","undefined","marker","DomEvent","L","latLng","listeners","attrs","on","latLngSync","leafletObject","emit","$slots"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/node_modules/@vue-leaflet/vue-leaflet/src/components/LMarker.vue"],"sourcesContent":["<script>\nimport { onMounted, ref, provide, inject, nextTick } from \"vue\";\nimport {\n  remapEvents,\n  propsBinder,\n  debounce,\n  WINDOW_OR_GLOBAL,\n  GLOBAL_LEAFLET_OPT,\n} from \"../utils.js\";\nimport { markerProps, setupMarker } from \"../functions/marker\";\nimport { render } from \"../functions/layer\";\n\n/**\n * Marker component, lets you add and personalize markers on the map\n */\nexport default {\n  name: \"LMarker\",\n  props: markerProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const ready = ref(false);\n\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n\n    provide(\"canSetParentHtml\", () => !!leafletRef.value.getElement());\n    provide(\n      \"setParentHtml\",\n      (html) => (leafletRef.value.getElement().innerHTML = html)\n    );\n    provide(\n      \"setIcon\",\n      (newIcon) => leafletRef.value.setIcon && leafletRef.value.setIcon(newIcon)\n    );\n    const { options, methods } = setupMarker(props, leafletRef, context);\n    if (options.icon === undefined) {\n      // If the options object has a property named 'icon', then Leaflet will overwrite\n      // the default icon with it for the marker, _even if it is undefined_.\n      // This leads to the issue discussed in https://github.com/vue-leaflet/vue-leaflet/issues/130\n      delete options.icon;\n    }\n\n    onMounted(async () => {\n      const { marker, DomEvent } = useGlobalLeaflet\n        ? WINDOW_OR_GLOBAL.L\n        : await import(\"leaflet/dist/leaflet-src.esm\");\n      leafletRef.value = marker(props.latLng, options);\n\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n\n      leafletRef.value.on(\"move\", debounce(methods.latLngSync, 100));\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value,\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n\n    return { ready, leafletObject: leafletRef };\n  },\n  render() {\n    return render(this.ready, this.$slots);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}