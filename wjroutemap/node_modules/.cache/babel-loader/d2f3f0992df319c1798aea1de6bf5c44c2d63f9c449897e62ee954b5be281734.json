{"ast":null,"code":"import { onMounted, onUnmounted, ref, inject, nextTick, h, render } from \"vue\";\nimport { remapEvents, propsBinder, WINDOW_OR_GLOBAL, GLOBAL_LEAFLET_OPT } from \"../utils.js\";\nimport { gridLayerProps, setupGridLayer } from \"../functions/gridLayer\";\nexport default {\n  props: {\n    ...gridLayerProps,\n    childRender: {\n      type: Function,\n      required: true\n    }\n  },\n  setup(props, context) {\n    const leafletRef = ref({});\n    const tileComponents = ref({});\n    const root = ref(null);\n    const ready = ref(false);\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n    const {\n      options,\n      methods\n    } = setupGridLayer(props, leafletRef, context);\n    onMounted(async () => {\n      const {\n        GridLayer,\n        DomEvent,\n        DomUtil\n      } = useGlobalLeaflet ? WINDOW_OR_GLOBAL.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      methods.onUnload = e => {\n        const key = leafletRef.value._tileCoordsToKey(e.coords);\n        if (tileComponents[key]) {\n          tileComponents[key].innerHTML = \"\";\n          tileComponents[key] = undefined;\n        }\n      };\n      methods.setTileComponent = () => {\n        leafletRef.value.redraw();\n      };\n      const GLayer = GridLayer.extend({\n        createTile(coords) {\n          const key = leafletRef.value._tileCoordsToKey(coords);\n          tileComponents[key] = DomUtil.create(\"div\");\n          let vNode = h({\n            setup: props.childRender,\n            props: [\"coords\"]\n          }, {\n            coords\n          });\n          render(vNode, tileComponents[key]);\n          return tileComponents[key];\n        }\n      });\n      leafletRef.value = new GLayer(options);\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n      leafletRef.value.on(\"tileunload\", methods.onUnload);\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n    onUnmounted(() => {\n      leafletRef.value.off(\"tileunload\", methods.onUnload);\n    });\n    return {\n      root,\n      ready,\n      leafletObject: leafletRef\n    };\n  },\n  render() {\n    if (this.ready) {\n      return h(\"div\", {\n        style: {\n          display: \"none\"\n        },\n        ref: \"root\"\n      });\n    }\n    return null;\n  }\n};","map":{"version":3,"mappings":"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","names":["onMounted","onUnmounted","ref","inject","nextTick","h","render","remapEvents","propsBinder","WINDOW_OR_GLOBAL","GLOBAL_LEAFLET_OPT","gridLayerProps","setupGridLayer","props","childRender","type","Function","required","setup","context","leafletRef","tileComponents","root","ready","useGlobalLeaflet","addLayer","options","methods","GridLayer","DomEvent","DomUtil","L","onUnload","e","key","value","_tileCoordsToKey","coords","innerHTML","undefined","setTileComponent","redraw","GLayer","extend","createTile","create","vNode","listeners","attrs","on","leafletObject","emit","off","style","display"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/node_modules/@vue-leaflet/vue-leaflet/src/components/LGridLayer.vue"],"sourcesContent":["<script>\nimport { onMounted, onUnmounted, ref, inject, nextTick, h, render } from \"vue\";\nimport {\n  remapEvents,\n  propsBinder,\n  WINDOW_OR_GLOBAL,\n  GLOBAL_LEAFLET_OPT,\n} from \"../utils.js\";\nimport { gridLayerProps, setupGridLayer } from \"../functions/gridLayer\";\n\nexport default {\n  props: {\n    ...gridLayerProps,\n    childRender: {\n      type: Function,\n      required: true,\n    },\n  },\n  setup(props, context) {\n    const leafletRef = ref({});\n    const tileComponents = ref({});\n    const root = ref(null);\n    const ready = ref(false);\n\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n\n    const { options, methods } = setupGridLayer(props, leafletRef, context);\n\n    onMounted(async () => {\n      const { GridLayer, DomEvent, DomUtil } = useGlobalLeaflet\n        ? WINDOW_OR_GLOBAL.L\n        : await import(\"leaflet/dist/leaflet-src.esm\");\n\n      methods.onUnload = (e) => {\n        const key = leafletRef.value._tileCoordsToKey(e.coords);\n        if (tileComponents[key]) {\n          tileComponents[key].innerHTML = \"\";\n          tileComponents[key] = undefined;\n        }\n      };\n\n      methods.setTileComponent = () => {\n        leafletRef.value.redraw();\n      };\n\n      const GLayer = GridLayer.extend({\n        createTile(coords) {\n          const key = leafletRef.value._tileCoordsToKey(coords);\n          tileComponents[key] = DomUtil.create(\"div\");\n\n          let vNode = h(\n            { setup: props.childRender, props: [\"coords\"] },\n            { coords }\n          );\n          render(vNode, tileComponents[key]);\n\n          return tileComponents[key];\n        },\n      });\n\n      leafletRef.value = new GLayer(options);\n\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n\n      leafletRef.value.on(\"tileunload\", methods.onUnload);\n\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value,\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n\n    onUnmounted(() => {\n      leafletRef.value.off(\"tileunload\", methods.onUnload);\n    });\n\n    return { root, ready, leafletObject: leafletRef };\n  },\n  render() {\n    if (this.ready) {\n      return h(\"div\", { style: { display: \"none\" }, ref: \"root\" });\n    }\n    return null;\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}