{"ast":null,"code":"import { onMounted, ref, inject, nextTick } from \"vue\";\nimport { remapEvents, propsBinder, WINDOW_OR_GLOBAL, GLOBAL_LEAFLET_OPT } from \"../utils.js\";\nimport { geoJSONProps, setupGeoJSON } from \"../functions/geoJSON\";\nimport { render } from \"../functions/layer\";\nexport default {\n  props: geoJSONProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const ready = ref(false);\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n    const {\n      methods,\n      options\n    } = setupGeoJSON(props, leafletRef, context);\n    onMounted(async () => {\n      const {\n        geoJSON,\n        DomEvent\n      } = useGlobalLeaflet ? WINDOW_OR_GLOBAL.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      leafletRef.value = geoJSON(props.geojson, options);\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n    return {\n      ready,\n      leafletObject: leafletRef\n    };\n  },\n  render() {\n    return render(this.ready, this.$slots);\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAO,QAAS,KAAK;AACtD,SACEC,WAAW,EACXC,WAAW,EACXC,gBAAgB,EAChBC,kBAAkB,QACb,aAAa;AACpB,SAASC,YAAY,EAAEC,YAAW,QAAS,sBAAsB;AACjE,SAASC,MAAK,QAAS,oBAAoB;AAE3C,eAAe;EACbC,KAAK,EAAEH,YAAY;EACnBI,KAAK,CAACD,KAAK,EAAEE,OAAO,EAAE;IACpB,MAAMC,UAAS,GAAIb,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAMc,KAAI,GAAId,GAAG,CAAC,KAAK,CAAC;IAExB,MAAMe,gBAAe,GAAId,MAAM,CAACK,kBAAkB,CAAC;IACnD,MAAMU,QAAO,GAAIf,MAAM,CAAC,UAAU,CAAC;IAEnC,MAAM;MAAEgB,OAAO;MAAEC;IAAQ,IAAIV,YAAY,CAACE,KAAK,EAAEG,UAAU,EAAED,OAAO,CAAC;IAErEb,SAAS,CAAC,YAAY;MACpB,MAAM;QAAEoB,OAAO;QAAEC;MAAS,IAAIL,gBAAe,GACzCV,gBAAgB,CAACgB,IACjB,MAAM,MAAM,CAAC,8BAA8B,CAAC;MAEhDR,UAAU,CAACS,KAAI,GAAIH,OAAO,CAACT,KAAK,CAACa,OAAO,EAAEL,OAAO,CAAC;MAElD,MAAMM,SAAQ,GAAIrB,WAAW,CAACS,OAAO,CAACa,KAAK,CAAC;MAC5CL,QAAQ,CAACM,EAAE,CAACb,UAAU,CAACS,KAAK,EAAEE,SAAS,CAAC;MAExCpB,WAAW,CAACa,OAAO,EAAEJ,UAAU,CAACS,KAAK,EAAEZ,KAAK,CAAC;MAC7CM,QAAQ,CAAC;QACP,GAAGN,KAAK;QACR,GAAGO,OAAO;QACVU,aAAa,EAAEd,UAAU,CAACS;MAC5B,CAAC,CAAC;MACFR,KAAK,CAACQ,KAAI,GAAI,IAAI;MAClBpB,QAAQ,CAAC,MAAMU,OAAO,CAACgB,IAAI,CAAC,OAAO,EAAEf,UAAU,CAACS,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;IACF,OAAO;MAAER,KAAK;MAAEa,aAAa,EAAEd;IAAW,CAAC;EAC7C,CAAC;EACDJ,MAAM,GAAG;IACP,OAAOA,MAAM,CAAC,IAAI,CAACK,KAAK,EAAE,IAAI,CAACe,MAAM,CAAC;EACxC;AACF,CAAC","names":["onMounted","ref","inject","nextTick","remapEvents","propsBinder","WINDOW_OR_GLOBAL","GLOBAL_LEAFLET_OPT","geoJSONProps","setupGeoJSON","render","props","setup","context","leafletRef","ready","useGlobalLeaflet","addLayer","methods","options","geoJSON","DomEvent","L","value","geojson","listeners","attrs","on","leafletObject","emit","$slots"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/node_modules/@vue-leaflet/vue-leaflet/src/components/LGeoJson.vue"],"sourcesContent":["<script>\nimport { onMounted, ref, inject, nextTick } from \"vue\";\nimport {\n  remapEvents,\n  propsBinder,\n  WINDOW_OR_GLOBAL,\n  GLOBAL_LEAFLET_OPT,\n} from \"../utils.js\";\nimport { geoJSONProps, setupGeoJSON } from \"../functions/geoJSON\";\nimport { render } from \"../functions/layer\";\n\nexport default {\n  props: geoJSONProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const ready = ref(false);\n\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n\n    const { methods, options } = setupGeoJSON(props, leafletRef, context);\n\n    onMounted(async () => {\n      const { geoJSON, DomEvent } = useGlobalLeaflet\n        ? WINDOW_OR_GLOBAL.L\n        : await import(\"leaflet/dist/leaflet-src.esm\");\n\n      leafletRef.value = geoJSON(props.geojson, options);\n\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value,\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n    return { ready, leafletObject: leafletRef };\n  },\n  render() {\n    return render(this.ready, this.$slots);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}