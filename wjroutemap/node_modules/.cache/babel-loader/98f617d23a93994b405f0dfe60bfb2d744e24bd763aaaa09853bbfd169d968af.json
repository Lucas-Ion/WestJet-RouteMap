{"ast":null,"code":"import { renderSlot as _renderSlot, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"none\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.ready ? _renderSlot(_ctx.$slots, \"default\", {\n    key: 0\n  }) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;EACOA,KAAqB,EAArB;IAAA;EAAA;AAAqB;;uBAA1BC,oBAEM,OAFNC,UAEM,GADQC,YAAK,GAAjBC,YAA0BC;IAAAC;EAAA","names":["style","_createElementBlock","_hoisted_1","$setup","_renderSlot","_ctx","key"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/src/components/MarkerCluster.vue"],"sourcesContent":["<template>\n  <div style=\"display: none\">\n    <slot v-if=\"ready\"></slot>\n  </div>\n</template>\n\n<script>\nimport \"leaflet.markercluster/dist/MarkerCluster.css\";\nimport \"leaflet.markercluster/dist/MarkerCluster.Default.css\";\nimport {\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n} from \"vue\";\nimport { propsBinder, remapEvents } from \"@vue-leaflet/vue-leaflet/src/utils\";\nimport {\n  render,\n  setup as layerSetup,\n} from \"@vue-leaflet/vue-leaflet/src/functions/layer\";\n\nconst props = {\n  options: {\n    type: Object,\n    default() {\n      return {};\n    },\n  },\n};\n\nexport default {\n  name: \"MarkerCluster\",\n\n  props,\n\n  // emits: ['ready'],\n\n  setup(props, context) {\n    const leafletRef = ref({});\n    const ready = ref(false);\n\n    const addLayerToMainMap = inject(\"addLayer\");\n    const removeLayerFromMainMap = inject(\"removeLayer\");\n\n    provide(\"canSetParentHtml\", () => !!leafletRef.value.getElement());\n    provide(\n      \"setParentHtml\",\n      (html) => (leafletRef.value.getElement().innerHTML = html)\n    );\n    // provide('setIcon', (newIcon) => leafletRef.value.setIcon && leafletRef.value.setIcon(newIcon))\n    provide(\"addLayer\", (layer) => {\n      // replace the provided addLayer function for child components of MarkerCluster so they add to the cluster rather than the map\n      leafletRef.value.addLayer(layer.leafletObject);\n    });\n    provide(\"removeLayer\", (layer) => {\n      leafletRef.value.removeLayer(layer.leafletObject);\n    });\n\n    // const {options, methods} = markerSetup(props, leafletRef, context)\n\n    const { methods } = layerSetup(props, leafletRef, context);\n\n    onMounted(async () => {\n      const { DomEvent, marker } = await import(\"leaflet/dist/leaflet-src.esm\");\n\n      const { MarkerClusterGroup } = await import(\n        \"leaflet.markercluster/dist/leaflet.markercluster-src.js\"\n      );\n      leafletRef.value = new MarkerClusterGroup(props.options);\n\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n\n      propsBinder(methods, leafletRef.value, props);\n\n      addLayerToMainMap({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value,\n      });\n\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n\n    onBeforeUnmount(\n      () =>\n        leafletRef.value &&\n        leafletRef.value._leaflet_id &&\n        removeLayerFromMainMap({ leafletObject: leafletRef.value })\n    );\n\n    return { ready, leafletObject: leafletRef };\n  },\n  render() {\n    return render(this.ready, this.$slots);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}