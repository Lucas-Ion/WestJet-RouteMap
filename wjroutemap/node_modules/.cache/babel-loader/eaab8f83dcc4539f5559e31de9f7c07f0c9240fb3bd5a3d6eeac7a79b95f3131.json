{"ast":null,"code":"import { onMounted, ref, inject, nextTick } from \"vue\";\nimport { propsBinder, remapEvents, WINDOW_OR_GLOBAL, GLOBAL_LEAFLET_OPT } from \"../utils.js\";\nimport { popupProps, setupPopup } from \"../functions/popup\";\nimport { render } from \"../functions/popper\";\n\n/**\n * Display a popup on the map\n */\nexport default {\n  name: \"LPopup\",\n  props: popupProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const root = ref(null);\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const bindPopup = inject(\"bindPopup\");\n    const {\n      options,\n      methods\n    } = setupPopup(props, leafletRef, context);\n    onMounted(async () => {\n      const {\n        popup,\n        DomEvent\n      } = useGlobalLeaflet ? WINDOW_OR_GLOBAL.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      leafletRef.value = popup(options);\n      if (props.latLng !== undefined) {\n        leafletRef.value.setLatLng(props.latLng);\n      }\n      propsBinder(methods, leafletRef.value, props);\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n      leafletRef.value.setContent(props.content || root.value);\n      bindPopup({\n        leafletObject: leafletRef.value\n      });\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n    return {\n      root,\n      leafletObject: leafletRef\n    };\n  },\n  render() {\n    return render(this.$slots);\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAO,QAAS,KAAK;AACtD,SACEC,WAAW,EACXC,WAAW,EACXC,gBAAgB,EAChBC,kBAAkB,QACb,aAAa;AACpB,SAASC,UAAU,EAAEC,UAAS,QAAS,oBAAoB;AAC3D,SAASC,MAAK,QAAS,qBAAqB;;AAE5C;;;AAGA,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAEJ,UAAU;EACjBK,KAAK,CAACD,KAAK,EAAEE,OAAO,EAAE;IACpB,MAAMC,UAAS,GAAId,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAMe,IAAG,GAAIf,GAAG,CAAC,IAAI,CAAC;IAEtB,MAAMgB,gBAAe,GAAIf,MAAM,CAACK,kBAAkB,CAAC;IACnD,MAAMW,SAAQ,GAAIhB,MAAM,CAAC,WAAW,CAAC;IAErC,MAAM;MAAEiB,OAAO;MAAEC;IAAQ,IAAIX,UAAU,CAACG,KAAK,EAAEG,UAAU,EAAED,OAAO,CAAC;IAEnEd,SAAS,CAAC,YAAY;MACpB,MAAM;QAAEqB,KAAK;QAAEC;MAAS,IAAIL,gBAAe,GACvCX,gBAAgB,CAACiB,IACjB,MAAM,MAAM,CAAC,8BAA8B,CAAC;MAEhDR,UAAU,CAACS,KAAI,GAAIH,KAAK,CAACF,OAAO,CAAC;MAEjC,IAAIP,KAAK,CAACa,MAAK,KAAMC,SAAS,EAAE;QAC9BX,UAAU,CAACS,KAAK,CAACG,SAAS,CAACf,KAAK,CAACa,MAAM,CAAC;MAC1C;MAEArB,WAAW,CAACgB,OAAO,EAAEL,UAAU,CAACS,KAAK,EAAEZ,KAAK,CAAC;MAC7C,MAAMgB,SAAQ,GAAIvB,WAAW,CAACS,OAAO,CAACe,KAAK,CAAC;MAC5CP,QAAQ,CAACQ,EAAE,CAACf,UAAU,CAACS,KAAK,EAAEI,SAAS,CAAC;MACxCb,UAAU,CAACS,KAAK,CAACO,UAAU,CAACnB,KAAK,CAACoB,OAAM,IAAKhB,IAAI,CAACQ,KAAK,CAAC;MACxDN,SAAS,CAAC;QAAEe,aAAa,EAAElB,UAAU,CAACS;MAAM,CAAC,CAAC;MAC9CrB,QAAQ,CAAC,MAAMW,OAAO,CAACoB,IAAI,CAAC,OAAO,EAAEnB,UAAU,CAACS,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;IACF,OAAO;MAAER,IAAI;MAAEiB,aAAa,EAAElB;IAAW,CAAC;EAC5C,CAAC;EACDL,MAAM,GAAG;IACP,OAAOA,MAAM,CAAC,IAAI,CAACyB,MAAM,CAAC;EAC5B;AACF,CAAC","names":["onMounted","ref","inject","nextTick","propsBinder","remapEvents","WINDOW_OR_GLOBAL","GLOBAL_LEAFLET_OPT","popupProps","setupPopup","render","name","props","setup","context","leafletRef","root","useGlobalLeaflet","bindPopup","options","methods","popup","DomEvent","L","value","latLng","undefined","setLatLng","listeners","attrs","on","setContent","content","leafletObject","emit","$slots"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/node_modules/@vue-leaflet/vue-leaflet/src/components/LPopup.vue"],"sourcesContent":["<script>\nimport { onMounted, ref, inject, nextTick } from \"vue\";\nimport {\n  propsBinder,\n  remapEvents,\n  WINDOW_OR_GLOBAL,\n  GLOBAL_LEAFLET_OPT,\n} from \"../utils.js\";\nimport { popupProps, setupPopup } from \"../functions/popup\";\nimport { render } from \"../functions/popper\";\n\n/**\n * Display a popup on the map\n */\nexport default {\n  name: \"LPopup\",\n  props: popupProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const root = ref(null);\n\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const bindPopup = inject(\"bindPopup\");\n\n    const { options, methods } = setupPopup(props, leafletRef, context);\n\n    onMounted(async () => {\n      const { popup, DomEvent } = useGlobalLeaflet\n        ? WINDOW_OR_GLOBAL.L\n        : await import(\"leaflet/dist/leaflet-src.esm\");\n\n      leafletRef.value = popup(options);\n\n      if (props.latLng !== undefined) {\n        leafletRef.value.setLatLng(props.latLng);\n      }\n\n      propsBinder(methods, leafletRef.value, props);\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n      leafletRef.value.setContent(props.content || root.value);\n      bindPopup({ leafletObject: leafletRef.value });\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n    return { root, leafletObject: leafletRef };\n  },\n  render() {\n    return render(this.$slots);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}