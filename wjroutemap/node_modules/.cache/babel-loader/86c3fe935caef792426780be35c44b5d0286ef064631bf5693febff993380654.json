{"ast":null,"code":"import { onMounted, ref, inject, nextTick } from \"vue\";\nimport { remapEvents, propsBinder, WINDOW_OR_GLOBAL, GLOBAL_LEAFLET_OPT } from \"../utils.js\";\nimport { imageOverlayProps, setupImageOverlay } from \"../functions/imageOverlay\";\nimport { render } from \"../functions/layer\";\n\n/**\n * ImageOverlay component, render a plain image instead of a geospatial map.\n */\nexport default {\n  name: \"LImageOverlay\",\n  props: imageOverlayProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const ready = ref(false);\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n    const {\n      options,\n      methods\n    } = setupImageOverlay(props, leafletRef, context);\n    onMounted(async () => {\n      const {\n        imageOverlay,\n        DomEvent\n      } = useGlobalLeaflet ? WINDOW_OR_GLOBAL.L : await import(\"leaflet/dist/leaflet-src.esm\");\n      leafletRef.value = imageOverlay(props.url, props.bounds, options);\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n    return {\n      ready,\n      leafletObject: leafletRef\n    };\n  },\n  render() {\n    return render(this.ready, this.$slots);\n  }\n};","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAO,QAAS,KAAK;AACtD,SACEC,WAAW,EACXC,WAAW,EACXC,gBAAgB,EAChBC,kBAAkB,QACb,aAAa;AACpB,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,2BAA2B;AAClC,SAASC,MAAK,QAAS,oBAAoB;;AAE3C;;;AAGA,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAEJ,iBAAiB;EACxBK,KAAK,CAACD,KAAK,EAAEE,OAAO,EAAE;IACpB,MAAMC,UAAS,GAAId,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAMe,KAAI,GAAIf,GAAG,CAAC,KAAK,CAAC;IAExB,MAAMgB,gBAAe,GAAIf,MAAM,CAACK,kBAAkB,CAAC;IACnD,MAAMW,QAAO,GAAIhB,MAAM,CAAC,UAAU,CAAC;IAEnC,MAAM;MAAEiB,OAAO;MAAEC;IAAQ,IAAIX,iBAAiB,CAACG,KAAK,EAAEG,UAAU,EAAED,OAAO,CAAC;IAE1Ed,SAAS,CAAC,YAAY;MACpB,MAAM;QAAEqB,YAAY;QAAEC;MAAS,IAAIL,gBAAe,GAC9CX,gBAAgB,CAACiB,IACjB,MAAM,MAAM,CAAC,8BAA8B,CAAC;MAChDR,UAAU,CAACS,KAAI,GAAIH,YAAY,CAACT,KAAK,CAACa,GAAG,EAAEb,KAAK,CAACc,MAAM,EAAEP,OAAO,CAAC;MAEjE,MAAMQ,SAAQ,GAAIvB,WAAW,CAACU,OAAO,CAACc,KAAK,CAAC;MAC5CN,QAAQ,CAACO,EAAE,CAACd,UAAU,CAACS,KAAK,EAAEG,SAAS,CAAC;MACxCtB,WAAW,CAACe,OAAO,EAAEL,UAAU,CAACS,KAAK,EAAEZ,KAAK,CAAC;MAC7CM,QAAQ,CAAC;QACP,GAAGN,KAAK;QACR,GAAGQ,OAAO;QACVU,aAAa,EAAEf,UAAU,CAACS;MAC5B,CAAC,CAAC;MACFR,KAAK,CAACQ,KAAI,GAAI,IAAI;MAClBrB,QAAQ,CAAC,MAAMW,OAAO,CAACiB,IAAI,CAAC,OAAO,EAAEhB,UAAU,CAACS,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;IAEF,OAAO;MAAER,KAAK;MAAEc,aAAa,EAAEf;IAAW,CAAC;EAC7C,CAAC;EACDL,MAAM,GAAG;IACP,OAAOA,MAAM,CAAC,IAAI,CAACM,KAAK,EAAE,IAAI,CAACgB,MAAM,CAAC;EACxC;AACF,CAAC","names":["onMounted","ref","inject","nextTick","remapEvents","propsBinder","WINDOW_OR_GLOBAL","GLOBAL_LEAFLET_OPT","imageOverlayProps","setupImageOverlay","render","name","props","setup","context","leafletRef","ready","useGlobalLeaflet","addLayer","options","methods","imageOverlay","DomEvent","L","value","url","bounds","listeners","attrs","on","leafletObject","emit","$slots"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/node_modules/@vue-leaflet/vue-leaflet/src/components/LImageOverlay.vue"],"sourcesContent":["<script>\nimport { onMounted, ref, inject, nextTick } from \"vue\";\nimport {\n  remapEvents,\n  propsBinder,\n  WINDOW_OR_GLOBAL,\n  GLOBAL_LEAFLET_OPT,\n} from \"../utils.js\";\nimport {\n  imageOverlayProps,\n  setupImageOverlay,\n} from \"../functions/imageOverlay\";\nimport { render } from \"../functions/layer\";\n\n/**\n * ImageOverlay component, render a plain image instead of a geospatial map.\n */\nexport default {\n  name: \"LImageOverlay\",\n  props: imageOverlayProps,\n  setup(props, context) {\n    const leafletRef = ref({});\n    const ready = ref(false);\n\n    const useGlobalLeaflet = inject(GLOBAL_LEAFLET_OPT);\n    const addLayer = inject(\"addLayer\");\n\n    const { options, methods } = setupImageOverlay(props, leafletRef, context);\n\n    onMounted(async () => {\n      const { imageOverlay, DomEvent } = useGlobalLeaflet\n        ? WINDOW_OR_GLOBAL.L\n        : await import(\"leaflet/dist/leaflet-src.esm\");\n      leafletRef.value = imageOverlay(props.url, props.bounds, options);\n\n      const listeners = remapEvents(context.attrs);\n      DomEvent.on(leafletRef.value, listeners);\n      propsBinder(methods, leafletRef.value, props);\n      addLayer({\n        ...props,\n        ...methods,\n        leafletObject: leafletRef.value,\n      });\n      ready.value = true;\n      nextTick(() => context.emit(\"ready\", leafletRef.value));\n    });\n\n    return { ready, leafletObject: leafletRef };\n  },\n  render() {\n    return render(this.ready, this.$slots);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}