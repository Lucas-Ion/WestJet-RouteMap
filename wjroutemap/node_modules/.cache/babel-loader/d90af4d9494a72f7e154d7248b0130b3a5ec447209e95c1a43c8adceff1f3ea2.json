{"ast":null,"code":"import { onUnmounted, provide, inject, h } from \"vue\";\nimport { componentProps, setupComponent } from \"./component\";\nimport { isFunction, propsToLeafletOptions } from \"../utils\";\nexport const layerProps = {\n  ...componentProps,\n  pane: {\n    type: String\n  },\n  attribution: {\n    type: String\n  },\n  name: {\n    type: String,\n    custom: true\n  },\n  layerType: {\n    type: String,\n    custom: true\n  },\n  visible: {\n    type: Boolean,\n    custom: true,\n    default: true\n  }\n};\nexport const setupLayer = (props, leafletRef, context) => {\n  const addLayer = inject(\"addLayer\");\n  const removeLayer = inject(\"removeLayer\");\n  const {\n    options: componentOptions,\n    methods: componentMethods\n  } = setupComponent(props);\n  const options = propsToLeafletOptions(props, layerProps, componentOptions);\n  const addThisLayer = () => addLayer({\n    leafletObject: leafletRef.value\n  });\n  const removeThisLayer = () => removeLayer({\n    leafletObject: leafletRef.value\n  });\n  const methods = {\n    ...componentMethods,\n    setAttribution(val, old) {\n      const attributionControl = this.$parent.leafletObject.attributionControl;\n      attributionControl.removeAttribution(old).addAttribution(val);\n    },\n    setName() {\n      removeThisLayer();\n      if (props.visible) {\n        addThisLayer();\n      }\n    },\n    setLayerType() {\n      removeThisLayer();\n      if (props.visible) {\n        addThisLayer();\n      }\n    },\n    setVisible(isVisible) {\n      if (leafletRef.value) {\n        if (isVisible) {\n          addThisLayer();\n        } else {\n          removeThisLayer();\n        }\n      }\n    },\n    bindPopup({\n      leafletObject\n    }) {\n      if (!leafletRef.value || !isFunction(leafletRef.value.bindPopup)) {\n        console.warn(\"Attempt to bind popup before bindPopup method available on layer.\");\n        return;\n      }\n      leafletRef.value.bindPopup(leafletObject);\n    },\n    bindTooltip({\n      leafletObject\n    }) {\n      if (!leafletRef.value || !isFunction(leafletRef.value.bindTooltip)) {\n        console.warn(\"Attempt to bind tooltip before bindTooltip method available on layer.\");\n        return;\n      }\n      leafletRef.value.bindTooltip(leafletObject);\n    },\n    unbindTooltip() {\n      const tooltip = leafletRef.value && isFunction(leafletRef.value.getTooltip) ? leafletRef.value.getTooltip() : null;\n      if (tooltip && isFunction(tooltip.unbindTooltip)) {\n        tooltip.unbindTooltip();\n      }\n    },\n    unbindPopup() {\n      const popup = leafletRef.value && isFunction(leafletRef.value.getPopup) ? leafletRef.value.getPopup() : null;\n      if (popup && isFunction(popup.unbindPopup)) {\n        popup.unbindPopup();\n      }\n    },\n    updateVisibleProp(value) {\n      /**\n       * Triggers when the visible prop needs to be updated\n       * @type {boolean}\n       * @property {boolean} value - value of the visible property\n       */\n      context.emit(\"update:visible\", value);\n    }\n  };\n  provide(\"bindPopup\", methods.bindPopup);\n  provide(\"bindTooltip\", methods.bindTooltip);\n  provide(\"unbindTooltip\", methods.unbindTooltip);\n  provide(\"unbindPopup\", methods.unbindPopup);\n  onUnmounted(() => {\n    methods.unbindPopup();\n    methods.unbindTooltip();\n    removeThisLayer();\n  });\n  return {\n    options,\n    methods\n  };\n};\nexport const render = (ready, slots) => {\n  if (ready && slots.default) {\n    return h(\"div\", {\n      style: {\n        display: \"none\"\n      }\n    }, slots.default());\n  }\n};","map":{"version":3,"names":["onUnmounted","provide","inject","h","componentProps","setupComponent","isFunction","propsToLeafletOptions","layerProps","pane","type","String","attribution","name","custom","layerType","visible","Boolean","default","setupLayer","props","leafletRef","context","addLayer","removeLayer","options","componentOptions","methods","componentMethods","addThisLayer","leafletObject","value","removeThisLayer","setAttribution","val","old","attributionControl","$parent","removeAttribution","addAttribution","setName","setLayerType","setVisible","isVisible","bindPopup","console","warn","bindTooltip","unbindTooltip","tooltip","getTooltip","unbindPopup","popup","getPopup","updateVisibleProp","emit","render","ready","slots","style","display"],"sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/node_modules/@vue-leaflet/vue-leaflet/src/functions/layer.js"],"sourcesContent":["import { onUnmounted, provide, inject, h } from \"vue\";\nimport { componentProps, setupComponent } from \"./component\";\nimport { isFunction, propsToLeafletOptions } from \"../utils\";\n\nexport const layerProps = {\n  ...componentProps,\n  pane: {\n    type: String,\n  },\n  attribution: {\n    type: String,\n  },\n  name: {\n    type: String,\n    custom: true,\n  },\n  layerType: {\n    type: String,\n    custom: true,\n  },\n  visible: {\n    type: Boolean,\n    custom: true,\n    default: true,\n  },\n};\n\nexport const setupLayer = (props, leafletRef, context) => {\n  const addLayer = inject(\"addLayer\");\n  const removeLayer = inject(\"removeLayer\");\n  const {\n    options: componentOptions,\n    methods: componentMethods,\n  } = setupComponent(props);\n\n  const options = propsToLeafletOptions(props, layerProps, componentOptions);\n\n  const addThisLayer = () => addLayer({ leafletObject: leafletRef.value });\n  const removeThisLayer = () =>\n    removeLayer({ leafletObject: leafletRef.value });\n\n  const methods = {\n    ...componentMethods,\n    setAttribution(val, old) {\n      const attributionControl = this.$parent.leafletObject.attributionControl;\n      attributionControl.removeAttribution(old).addAttribution(val);\n    },\n    setName() {\n      removeThisLayer();\n      if (props.visible) {\n        addThisLayer();\n      }\n    },\n    setLayerType() {\n      removeThisLayer();\n      if (props.visible) {\n        addThisLayer();\n      }\n    },\n    setVisible(isVisible) {\n      if (leafletRef.value) {\n        if (isVisible) {\n          addThisLayer();\n        } else {\n          removeThisLayer();\n        }\n      }\n    },\n    bindPopup({ leafletObject }) {\n      if (!leafletRef.value || !isFunction(leafletRef.value.bindPopup)) {\n        console.warn(\n          \"Attempt to bind popup before bindPopup method available on layer.\"\n        );\n\n        return;\n      }\n\n      leafletRef.value.bindPopup(leafletObject);\n    },\n    bindTooltip({ leafletObject }) {\n      if (!leafletRef.value || !isFunction(leafletRef.value.bindTooltip)) {\n        console.warn(\n          \"Attempt to bind tooltip before bindTooltip method available on layer.\"\n        );\n\n        return;\n      }\n\n      leafletRef.value.bindTooltip(leafletObject);\n    },\n    unbindTooltip() {\n      const tooltip =\n        leafletRef.value && isFunction(leafletRef.value.getTooltip)\n          ? leafletRef.value.getTooltip()\n          : null;\n      if (tooltip && isFunction(tooltip.unbindTooltip)) {\n        tooltip.unbindTooltip();\n      }\n    },\n    unbindPopup() {\n      const popup =\n        leafletRef.value && isFunction(leafletRef.value.getPopup)\n          ? leafletRef.value.getPopup()\n          : null;\n      if (popup && isFunction(popup.unbindPopup)) {\n        popup.unbindPopup();\n      }\n    },\n    updateVisibleProp(value) {\n      /**\n       * Triggers when the visible prop needs to be updated\n       * @type {boolean}\n       * @property {boolean} value - value of the visible property\n       */\n      context.emit(\"update:visible\", value);\n    },\n  };\n\n  provide(\"bindPopup\", methods.bindPopup);\n  provide(\"bindTooltip\", methods.bindTooltip);\n  provide(\"unbindTooltip\", methods.unbindTooltip);\n  provide(\"unbindPopup\", methods.unbindPopup);\n\n  onUnmounted(() => {\n    methods.unbindPopup();\n    methods.unbindTooltip();\n    removeThisLayer();\n  });\n\n  return { options, methods };\n};\n\nexport const render = (ready, slots) => {\n  if (ready && slots.default) {\n    return h(\"div\", { style: { display: \"none\" } }, slots.default());\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}