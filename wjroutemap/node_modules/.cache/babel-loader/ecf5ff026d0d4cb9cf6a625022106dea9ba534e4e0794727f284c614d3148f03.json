{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"leaflet/dist/leaflet.css\";\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport westjet from '../assets/westjet.png';\nimport { conditionalExpression } from \"@babel/types\";\nexport default {\n  name: 'DestMap',\n  props: {\n    dests: Array\n  },\n  // components: {\n  //   LMap,\n  //   LTileLayer,\n  //   LMarker,\n  //   LIcon,\n  //   LTooltip,\n  // },\n  data() {\n    return {\n      url: 'https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db',\n      attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      zoom: 4,\n      center: [47.313220, -1.319482],\n      //default\n      markerLatLngBob: [47.313220, -17.319482],\n      icon: westjet,\n      iconSize: [40, 25],\n      searchTerm: '',\n      suggestions: [],\n      suggestion: '',\n      showSuggestions: false,\n      placeholderText: 'Location Not Selected',\n      currentLocationAirportCode: 'YYC'\n    };\n  },\n  methods: {\n    updateSuggestions(dests) {\n      var destinations = [];\n      for (var index in dests) {\n        destinations.push([dests[index].name, dests[index].countryName]);\n      }\n      this.suggestions = destinations.filter(suggestion => suggestion[0].toLowerCase().startsWith(this.searchTerm.toLowerCase()));\n      // Show the suggestions if there are any.\n      this.showSuggestions = this.suggestions.length > 0;\n    },\n    hideSuggestions() {\n      // Hide the suggestions when the search input loses focus.\n      this.showSuggestions = false;\n    },\n    selectSuggestion(dests, suggestion) {\n      // When a suggestion is clicked, update the search term and hide the suggestions.\n      this.searchTerm = suggestion[0];\n      this.showSuggestions = false;\n      for (var index in dests) {\n        if (dests[index].name === suggestion[0]) {\n          this.center = [dests[index].latitude, dests[index].longitude];\n          this.placeholderText = dests[index].name;\n          this.currentLocationAirportCode = dests[index].code;\n        }\n      }\n    },\n    latLng: function (lat, lng) {\n      return [lat, lng];\n    },\n    getLocation: function () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          var latitude = position.coords.latitude;\n          var longitude = position.coords.longitude;\n          this.center = [latitude, longitude];\n        });\n      }\n    },\n    openPopup: async function (e) {\n      let marker = e.target;\n      let dest = marker.options.dest;\n      //console.log(marker.options.dest.code)\n      const priceMessage = await this.getPrice(dest);\n\n      // let popupContent = `You have selected ${dest.name}'s airport <br> Price: $${price}`;\n      marker.unbindPopup().bindPopup(priceMessage).openPopup();\n    },\n    getPrice: async function (destination) {\n      if (destination.code == this.currentLocationAirportCode) {\n        return \"This is your current departure location\";\n      }\n      let route = this.currentLocationAirportCode + destination.code;\n      const axios = require('axios');\n      let price = \"\";\n      let priceMessage = \"\";\n      const params = new URLSearchParams();\n      params.append('o', this.currentLocationAirportCode);\n      params.append('d', destination.code);\n      params.append('rangeStartOffset', '0');\n      params.append('rangeEndOffset', '60');\n      try {\n        const response = await axios.get('https://api.westjet.com/price-points/v1/retail', {\n          params: params,\n          headers: {\n            'accept': 'application/json'\n          }\n        });\n        price = response.data[route][0].price;\n        priceMessage = `You have selected ${destination.name}'s airport <br> Price: $${price}`;\n        if (response.data[route][0].status === \"NO_SCHEDULES\") {\n          priceMessage = \"This is a seasonal route that is currently not being served.\";\n        }\n      } catch (error) {\n        console.log(error);\n        priceMessage = \"No price available for this route.\";\n      }\n      console.log(price);\n      return priceMessage;\n    },\n    createMarker(dest) {\n      let wjIcon = L.icon({\n        iconUrl: this.icon,\n        iconSize: this.iconSize\n      });\n      //<l-tooltip> {{ dest.name }}, {{dest.countryName}} </l-tooltip>\n      let marker = L.marker(this.latLng(dest.latitude, dest.longitude), {\n        icon: wjIcon,\n        dest: dest\n      });\n      marker.on('click', this.openPopup);\n      marker.bindTooltip(`${dest.name}, ${dest.countryName}`);\n      return marker;\n    }\n  },\n  mounted() {\n    this.getLocation();\n    var map = L.map(\"map\").setView([47.313220, -1.319482], 4);\n    L.tileLayer(\"https://tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db\", {\n      minZoom: 4,\n      maxZoom: 7,\n      attribution: 'Maps <a href=&copy; https://www.thunderforest.com/>Thunderforest</a>, Data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap Contributors</a>'\n    }).addTo(map);\n    let markers = L.markerClusterGroup();\n\n    // create a marker for each airport\n    for (let dest of this.dests) {\n      let marker = this.createMarker(dest);\n      markers.addLayer(marker);\n    }\n    map.addLayer(markers);\n  }\n};","map":{"version":3,"mappings":";AAyBE,OAAO,0BAA0B;AACjC,OAAO,KAAKA,OAAO,SAAS;AAC5B,OAAO,uBAAuB;AAC9B,OAAO,8CAA8C;AACrD,OAAO,sDAAqD;AAE5D,OAAOC,OAAM,MAAO,uBAAuB;AAC3C,SAASC,qBAAoB,QAAS,cAAc;AAEpD,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACLC,KAAK,EAAEC;EACT,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAI,GAAG;IACL,OAAO;MACLC,GAAG,EAAE,8FAA8F;MACnGC,WAAW,EAAE,0FAA0F;MACvGC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;MAAE;MAChCC,eAAe,EAAE,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;MACxCC,IAAI,EAAEZ,OAAO;MACba,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MAClBC,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,EAAE;MACdC,eAAe,EAAE,KAAK;MACtBC,eAAe,EAAE,uBAAuB;MACxCC,0BAA0B,EAAE;IAC9B,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,iBAAiB,CAACjB,KAAK,EAAE;MAEvB,IAAIkB,YAAW,GAAI,EAAC;MACpB,KAAK,IAAIC,KAAI,IAAKnB,KAAK,EAAE;QACvBkB,YAAY,CAACE,IAAI,CAAC,CAACpB,KAAK,CAACmB,KAAK,CAAC,CAACrB,IAAI,EAAEE,KAAK,CAACmB,KAAK,CAAC,CAACE,WAAW,CAAC;MACjE;MACA,IAAI,CAACV,WAAU,GACbO,YAAY,CAACI,MAAM,CAAEV,UAAU,IAC7BA,UAAU,CAAC,CAAC,CAAC,CAACW,WAAW,EAAE,CAACC,UAAU,CAAC,IAAI,CAACd,UAAU,CAACa,WAAW,EAAE,EACrE;MACH;MACA,IAAI,CAACV,eAAc,GAAI,IAAI,CAACF,WAAW,CAACc,MAAK,GAAI,CAAC;IACpD,CAAC;IACDC,eAAe,GAAG;MAChB;MACA,IAAI,CAACb,eAAc,GAAI,KAAK;IAC9B,CAAC;IACDc,gBAAgB,CAAC3B,KAAK,EAAEY,UAAU,EAAE;MAClC;MACA,IAAI,CAACF,UAAS,GAAIE,UAAU,CAAC,CAAC,CAAC;MAC/B,IAAI,CAACC,eAAc,GAAI,KAAK;MAC5B,KAAK,IAAIM,KAAI,IAAKnB,KAAK,EAAE;QACvB,IAAIA,KAAK,CAACmB,KAAK,CAAC,CAACrB,IAAG,KAAMc,UAAU,CAAC,CAAC,CAAC,EAAE;UACvC,IAAI,CAACN,MAAK,GAAI,CAACN,KAAK,CAACmB,KAAK,CAAC,CAACS,QAAQ,EAAE5B,KAAK,CAACmB,KAAK,CAAC,CAACU,SAAS,CAAC;UAC7D,IAAI,CAACf,eAAc,GAAId,KAAK,CAACmB,KAAK,CAAC,CAACrB,IAAI;UACxC,IAAI,CAACiB,0BAAyB,GAAIf,KAAK,CAACmB,KAAK,CAAC,CAACW,IAAI;QACrD;MACF;IACF,CAAC;IACDC,MAAM,EAAE,UAASC,GAAG,EAAEC,GAAG,EAAE;MACzB,OAAO,CAACD,GAAG,EAAEC,GAAG;IAClB,CAAC;IACDC,WAAW,EAAE,YAAW;MACtB,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;UACrD,IAAIV,QAAO,GAAIU,QAAQ,CAACC,MAAM,CAACX,QAAQ;UACvC,IAAIC,SAAQ,GAAIS,QAAQ,CAACC,MAAM,CAACV,SAAS;UACzC,IAAI,CAACvB,MAAK,GAAI,CAACsB,QAAQ,EAAEC,SAAS;QACpC,CAAC,CAAC;MACJ;IACF,CAAC;IACDW,SAAS,EAAE,gBAAeC,CAAC,EAAE;MAC3B,IAAIC,MAAK,GAAID,CAAC,CAACE,MAAK;MACpB,IAAIC,IAAG,GAAIF,MAAM,CAACG,OAAO,CAACD,IAAG;MAC7B;MACA,MAAME,YAAW,GAAI,MAAM,IAAI,CAACC,QAAQ,CAACH,IAAI,CAAC;;MAE9C;MACAF,MAAM,CAACM,WAAW,EAAE,CAACC,SAAS,CAACH,YAAY,CAAC,CAACN,SAAS,EAAE;IAE1D,CAAC;IACDO,QAAQ,EAAE,gBAAgBG,WAAW,EAAE;MACrC,IAAGA,WAAW,CAACpB,IAAG,IAAK,IAAI,CAACf,0BAA0B,EACtD;QACE,OAAO,yCAAyC;MAClD;MAEA,IAAIoC,KAAI,GAAI,IAAI,CAACpC,0BAAyB,GAAImC,WAAW,CAACpB,IAAI;MAE9D,MAAMsB,KAAI,GAAIC,OAAO,CAAC,OAAO,CAAC;MAE9B,IAAIC,KAAI,GAAI,EAAE;MACd,IAAIR,YAAW,GAAI,EAAE;MAErB,MAAMS,MAAK,GAAI,IAAIC,eAAe,EAAE;MACpCD,MAAM,CAACE,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC1C,0BAA0B,CAAC;MACnDwC,MAAM,CAACE,MAAM,CAAC,GAAG,EAAEP,WAAW,CAACpB,IAAI,CAAC;MACpCyB,MAAM,CAACE,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC;MACtCF,MAAM,CAACE,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAAC;MAErC,IAAG;QACD,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,gDAAgD,EAAE;UACjFJ,MAAM,EAAEA,MAAM;UACdK,OAAO,EAAE;YACP,QAAQ,EAAE;UACZ;QACF,CAAC,CAAC;QACFN,KAAI,GAAII,QAAQ,CAACxD,IAAI,CAACiD,KAAK,CAAC,CAAC,CAAC,CAAC,CAACG,KAAK;QACrCR,YAAW,GAAK,qBAAoBI,WAAW,CAACpD,IAAK,2BAA0BwD,KAAM,EAAC;QACtF,IAAGI,QAAQ,CAACxD,IAAI,CAACiD,KAAK,CAAC,CAAC,CAAC,CAAC,CAACU,MAAK,KAAM,cAAc,EAAC;UAEnDf,YAAW,GAAI,8DAA6D;QAC9E;MACF,EAAE,OAAMgB,KAAK,EAAE;QACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClBhB,YAAW,GAAI,oCAAoC;MACrD;MACAiB,OAAO,CAACC,GAAG,CAACV,KAAK;MACjB,OAAOR,YAAY;IACrB,CAAC;IACDmB,YAAY,CAACrB,IAAI,EAAE;MACjB,IAAIsB,MAAK,GAAIvE,CAAC,CAACa,IAAI,CAAC;QAClB2D,OAAO,EAAE,IAAI,CAAC3D,IAAI;QAClBC,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC,CAAC;MACF;MACA,IAAIiC,MAAK,GAAI/C,CAAC,CAAC+C,MAAM,CAAC,IAAI,CAACX,MAAM,CAACa,IAAI,CAAChB,QAAQ,EAAEgB,IAAI,CAACf,SAAS,CAAC,EAAE;QAACrB,IAAI,EAAE0D,MAAM;QAAEtB,IAAI,EAAEA;MAAI,CAAC,CAAC;MAC7FF,MAAM,CAAC0B,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC5B,SAAS;MACjCE,MAAM,CAAC2B,WAAW,CAAE,GAAEzB,IAAI,CAAC9C,IAAK,KAAI8C,IAAI,CAACvB,WAAY,EAAC;MACtD,OAAOqB,MAAM;IACf;EACF,CAAC;EACD4B,OAAO,GAAG;IAER,IAAI,CAACpC,WAAW,EAAE;IAElB,IAAIqC,GAAE,GAAI5E,CAAC,CAAC4E,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAEzD7E,CAAC,CAAC8E,SAAS,CACT,uGAAuG,EACvG;MACEC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE,CAAC;MACVvE,WAAW,EAAE;IACf,EACD,CAACwE,KAAK,CAACL,GAAG,CAAC;IAEZ,IAAIM,OAAM,GAAIlF,CAAC,CAACmF,kBAAkB,EAAE;;IAEpC;IACA,KAAI,IAAIlC,IAAG,IAAK,IAAI,CAAC5C,KAAK,EAAE;MAE1B,IAAI0C,MAAK,GAAI,IAAI,CAACuB,YAAY,CAACrB,IAAI;MACnCiC,OAAO,CAACE,QAAQ,CAACrC,MAAM;IAEzB;IAEA6B,GAAG,CAACQ,QAAQ,CAACF,OAAO,CAAC;EACvB;AACF,CAAC","names":["L","westjet","conditionalExpression","name","props","dests","Array","data","url","attribution","zoom","center","markerLatLngBob","icon","iconSize","searchTerm","suggestions","suggestion","showSuggestions","placeholderText","currentLocationAirportCode","methods","updateSuggestions","destinations","index","push","countryName","filter","toLowerCase","startsWith","length","hideSuggestions","selectSuggestion","latitude","longitude","code","latLng","lat","lng","getLocation","navigator","geolocation","getCurrentPosition","position","coords","openPopup","e","marker","target","dest","options","priceMessage","getPrice","unbindPopup","bindPopup","destination","route","axios","require","price","params","URLSearchParams","append","response","get","headers","status","error","console","log","createMarker","wjIcon","iconUrl","on","bindTooltip","mounted","map","setView","tileLayer","minZoom","maxZoom","addTo","markers","markerClusterGroup","addLayer"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/src/components/DestMap.vue"],"sourcesContent":["<template>\n  <div style=\"height:1000px; width:1300px\">\n    <div class=\"search-overlay\">\n      <input type=\"text\" class=\"search-overlay\" :placeholder=\"'From: ' + placeholderText\" v-model=\"searchTerm\" @input=\"updateSuggestions(dests)\" @blur=\"hideSuggestions\">\n      <ul class=\"search-suggestions\" v-if=\"showSuggestions\">\n        <li class=\"search-suggestion\" v-for=\"(suggestion, index) in suggestions\" :key=\"index\" @mousedown=\"selectSuggestion(dests, suggestion)\">\n          {{ suggestion[0] + \", \" + suggestion[1] }}\n        </li>\n      </ul>\n    </div>\n    <div id=\"map\" style=\"height:1000px; width:1300px\"></div>\n    <!-- <l-map ref=\"map\" :zoom=\"zoom\" :center=\"center\" maxZoom=\"7\" minZoom=\"4\">\n      <div class=\"search-overlay\">\n        <input type=\"text\" placeholder=\"Search\" v-model=\"searchQuery\" @keyup.enter=\"search(searchQuery, dests)\">\n      </div>\n      <l-tile-layer url=\"https://tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db\" layer-type=\"base\" name=\"OpenStreetMap\"></l-tile-layer>\n      <l-marker ref=\"markers\" :key=\"index\" v-for=\"(dest, index) in dests\" :lat-lng=\"latLng(dest.latitude, dest.longitude)\" @click=\"openPopup(dest, index)\">\n        <l-icon :icon-size=\"iconSize\" :icon-url=\"icon\"></l-icon>\n        <l-tooltip> {{ dest.name }}, {{dest.countryName}} </l-tooltip>\n      </l-marker>\n    </l-map> -->\n  </div>\n</template>\n  \n<script>\n  import \"leaflet/dist/leaflet.css\";\n  import * as L from 'leaflet';\n  import 'leaflet.markercluster';\n  import 'leaflet.markercluster/dist/MarkerCluster.css';\n  import 'leaflet.markercluster/dist/MarkerCluster.Default.css'\n\n  import westjet from '../assets/westjet.png';\n  import { conditionalExpression } from \"@babel/types\";\n\n  export default {\n    name: 'DestMap',\n    props: {\n      dests: Array\n    },\n    // components: {\n    //   LMap,\n    //   LTileLayer,\n    //   LMarker,\n    //   LIcon,\n    //   LTooltip,\n    // },\n    data() {\n      return {\n        url: 'https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db',\n        attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n        zoom: 4,\n        center: [47.313220, -1.319482], //default\n        markerLatLngBob: [47.313220, -17.319482],\n        icon: westjet,\n        iconSize: [40, 25],\n        searchTerm: '',\n        suggestions: [],\n        suggestion: '',\n        showSuggestions: false,\n        placeholderText: 'Location Not Selected',\n        currentLocationAirportCode: 'YYC'\n      };\n    },\n    methods: {\n      updateSuggestions(dests) {\n        \n        var destinations = []\n        for (var index in dests) {\n          destinations.push([dests[index].name, dests[index].countryName])\n        }\n        this.suggestions =\n          destinations.filter((suggestion) =>\n            suggestion[0].toLowerCase().startsWith(this.searchTerm.toLowerCase())\n          );\n        // Show the suggestions if there are any.\n        this.showSuggestions = this.suggestions.length > 0;\n      },\n      hideSuggestions() {\n        // Hide the suggestions when the search input loses focus.\n        this.showSuggestions = false;\n      },\n      selectSuggestion(dests, suggestion) {\n        // When a suggestion is clicked, update the search term and hide the suggestions.\n        this.searchTerm = suggestion[0];\n        this.showSuggestions = false;\n        for (var index in dests) {\n          if (dests[index].name === suggestion[0]) {\n            this.center = [dests[index].latitude, dests[index].longitude];\n            this.placeholderText = dests[index].name;\n            this.currentLocationAirportCode = dests[index].code;\n          }\n        }\n      },\n      latLng: function(lat, lng) {\n        return [lat, lng]\n      },\n      getLocation: function() {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition((position) => {\n            var latitude = position.coords.latitude;\n            var longitude = position.coords.longitude;\n            this.center = [latitude, longitude]\n          });\n        }\n      },\n      openPopup: async function(e) {\n        let marker = e.target\n        let dest = marker.options.dest\n        //console.log(marker.options.dest.code)\n        const priceMessage = await this.getPrice(dest);\n\n        // let popupContent = `You have selected ${dest.name}'s airport <br> Price: $${price}`;\n        marker.unbindPopup().bindPopup(priceMessage).openPopup();\n\n      },\n      getPrice: async function (destination) {\n        if(destination.code == this.currentLocationAirportCode)\n        {\n          return \"This is your current departure location\";\n        }\n\n        let route = this.currentLocationAirportCode + destination.code;\n\n        const axios = require('axios');\n\n        let price = \"\";\n        let priceMessage = \"\";\n\n        const params = new URLSearchParams();\n        params.append('o', this.currentLocationAirportCode);\n        params.append('d', destination.code);\n        params.append('rangeStartOffset', '0');\n        params.append('rangeEndOffset', '60');\n\n        try{\n          const response = await axios.get('https://api.westjet.com/price-points/v1/retail', {\n            params: params,\n            headers: {\n              'accept': 'application/json'\n            }\n          });\n          price = response.data[route][0].price;\n          priceMessage = `You have selected ${destination.name}'s airport <br> Price: $${price}`;\n          if(response.data[route][0].status === \"NO_SCHEDULES\"){\n            \n            priceMessage = \"This is a seasonal route that is currently not being served.\"\n          }\n        } catch(error) {\n          console.log(error);\n          priceMessage = \"No price available for this route.\";\n        }\n        console.log(price)\n        return priceMessage;\n      },\n      createMarker(dest) {\n        let wjIcon = L.icon({\n          iconUrl: this.icon,\n          iconSize: this.iconSize\n        });\n        //<l-tooltip> {{ dest.name }}, {{dest.countryName}} </l-tooltip>\n        let marker = L.marker(this.latLng(dest.latitude, dest.longitude), {icon: wjIcon, dest: dest});\n        marker.on('click', this.openPopup)\n        marker.bindTooltip(`${dest.name}, ${dest.countryName}`)\n        return marker;\n      }\n    },\n    mounted() {\n\n      this.getLocation();\n      \n      var map = L.map(\"map\").setView([47.313220, -1.319482], 4);\n\n      L.tileLayer(\n        \"https://tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db\",\n        {\n          minZoom: 4,\n          maxZoom: 7,\n          attribution: 'Maps <a href=&copy; https://www.thunderforest.com/>Thunderforest</a>, Data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap Contributors</a>'\n        }\n      ).addTo(map);\n      \n      let markers = L.markerClusterGroup();\n\n      // create a marker for each airport\n      for(let dest of this.dests) {\n    \n        let marker = this.createMarker(dest)\n        markers.addLayer(marker)\n\n      }\n\n      map.addLayer(markers);\n    }\n  };\n</script>\n  \n<style>\n  .leaflet-container {\n    border-radius: 25px;\n  }\n  .search-overlay {\n    position: absolute;\n    top: 140px;\n    left: 195px;\n    width: 60%;\n    height: 20%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 999;\n    pointer-events: auto;\n  }\n  .search-overlay:hover #map-container{\n    pointer-events: none;\n  }\n  input[type=\"text\"] {\n    padding: 10px;\n    border-radius: 5px;\n    border: none;\n    outline: none;\n    font-size: 16px;\n    background-color: white;\n    width: 50%;\n  }\n  .search-container {\n    display: flex;\n    justify-content: center;\n    margin: 20px 0;\n  }\n  .search-bar {\n    position: relative;\n  }\n  .search-input {\n    width: 300px;\n    padding: 8px;\n    border: none;\n    border-radius: 5px;\n  }\n  .search-suggestions {\n    position: absolute;\n    top: 180px;\n    left: 200px;\n    z-index: 1;\n    width: 300px;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    background-color: #fff;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n  }\n  .search-suggestion {\n    padding: 8px;\n    cursor: pointer;\n  }\n  .search-suggestion:hover {\n    background-color: #f2f2f2;\n  }\n</style>\n\n    \n    "]},"metadata":{},"sourceType":"module","externalDependencies":[]}