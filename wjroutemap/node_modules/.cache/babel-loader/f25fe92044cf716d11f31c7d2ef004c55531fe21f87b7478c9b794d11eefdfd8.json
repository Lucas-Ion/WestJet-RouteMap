{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"height\": \"1000px\",\n    \"width\": \"1300px\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"map\",\n  style: {\n    \"height\": \"1000px\",\n    \"width\": \"1300px\"\n  }\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\" <l-map ref=\\\"map\\\" :zoom=\\\"zoom\\\" :center=\\\"center\\\" maxZoom=\\\"7\\\" minZoom=\\\"4\\\">\\n      <div class=\\\"search-overlay\\\">\\n        <input type=\\\"text\\\" placeholder=\\\"Search\\\" v-model=\\\"searchQuery\\\" @keyup.enter=\\\"search(searchQuery, dests)\\\">\\n      </div>\\n      <l-tile-layer url=\\\"https://tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db\\\" layer-type=\\\"base\\\" name=\\\"OpenStreetMap\\\"></l-tile-layer>\\n      <l-marker ref=\\\"markers\\\" :key=\\\"index\\\" v-for=\\\"(dest, index) in dests\\\" :lat-lng=\\\"latLng(dest.latitude, dest.longitude)\\\" @click=\\\"openPopup(dest, index)\\\">\\n        <l-icon :icon-size=\\\"iconSize\\\" :icon-url=\\\"icon\\\"></l-icon>\\n        <l-tooltip> {{ dest.name }}, {{dest.countryName}} </l-tooltip>\\n      </l-marker>\\n    </l-map> \")]);\n}","map":{"version":3,"mappings":";;EACOA,KAAmC,EAAnC;IAAA;IAAA;EAAA;AAAmC;gCACtCC,oBAAwD;EAAnDC,EAAE,EAAC,KAAK;EAACF,KAAmC,EAAnC;IAAA;IAAA;EAAA;;;;uBADhBG,oBAYM,OAZNC,UAYM,GAXJC,UAAwD,EACxDC,4yBASY","names":["style","_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sourceRoot":"","sources":["/Users/lucasion/Desktop/Capstone/WestJet-RouteMap/wjroutemap/src/components/DestMap.vue"],"sourcesContent":["<template>\n  <div style=\"height:1000px; width:1300px\">\n    <div id=\"map\" style=\"height:1000px; width:1300px\"></div>\n    <!-- <l-map ref=\"map\" :zoom=\"zoom\" :center=\"center\" maxZoom=\"7\" minZoom=\"4\">\n      <div class=\"search-overlay\">\n        <input type=\"text\" placeholder=\"Search\" v-model=\"searchQuery\" @keyup.enter=\"search(searchQuery, dests)\">\n      </div>\n      <l-tile-layer url=\"https://tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png?apikey=9b2313ed32304004a51c1494aedf88db\" layer-type=\"base\" name=\"OpenStreetMap\"></l-tile-layer>\n      <l-marker ref=\"markers\" :key=\"index\" v-for=\"(dest, index) in dests\" :lat-lng=\"latLng(dest.latitude, dest.longitude)\" @click=\"openPopup(dest, index)\">\n        <l-icon :icon-size=\"iconSize\" :icon-url=\"icon\"></l-icon>\n        <l-tooltip> {{ dest.name }}, {{dest.countryName}} </l-tooltip>\n      </l-marker>\n    </l-map> -->\n  </div>\n</template>\n  \n<script>\nimport \"leaflet/dist/leaflet.css\";\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css'\n\nimport westjet from '../assets/westjet.png';\nexport default {\n  name: 'DestMap',\n  props: {\n    dests: Array\n  },\n  // components: {\n  //   LMap,\n  //   LTileLayer,\n  //   LMarker,\n  //   LIcon,\n  //   LTooltip,\n  // },\n  data() {\n    return {\n      url: 'https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png',\n      attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n      zoom: 4,\n      center: [47.313220, -1.319482], //default\n      markerLatLngBob: [47.313220, -17.319482],\n      icon: westjet,\n      iconSize: [85, 50],\n      searchQuery: '',\n\n    };\n  },\n  methods: {\n    latLng: function (lat, lng) {\n      return [lat, lng]\n    },\n    getLocation: function () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          var latitude = position.coords.latitude;\n          var longitude = position.coords.longitude;\n          this.center = [latitude, longitude]\n        });\n      }\n    },\n    search(searchQuery, dests) {\n      for (var index in dests) {\n        var search = searchQuery.toLowerCase()\n        var destination = dests[index].name.toLowerCase()\n        if (destination.includes(search)) // search centers at the first substring result\n        {\n          this.center = [dests[index].latitude, dests[index].longitude]\n          return;\n        }\n      }\n    },\n    openPopup: async function (e) {\n      let marker = e.target\n      let dest = marker.options.dest\n      //console.log(marker.options.dest.code)\n      const price = await this.getPrice(dest.code);\n\n\n      let popupContent = `You have selected ${dest.name}'s airport <br> Price: ${price}`;\n      marker.unbindPopup().bindPopup(popupContent).openPopup();\n\n    },\n    getPrice: async function (destination) {\n\n      let route = \"YYC\" + destination\n\n      const axios = require('axios');\n\n      let price = \"\"\n\n      const params = new URLSearchParams();\n      params.append('o', 'YYC');\n      params.append('d', destination);\n      params.append('rangeStartOffset', '0');\n      params.append('rangeEndOffset', '60');\n\n      try {\n        const response = await axios.get('https://api.westjet.com/price-points/v1/retail', {\n          params: params,\n          headers: {\n            'accept': 'application/json'\n          }\n        });\n        price = response.data[route][0].price;\n        if (response.data[route][0].status === \"NO_SCHEDULES\") {\n          console.log(\"h\")\n          price = \"This is a seasonal route that is currently not being served.\"\n        }\n      } catch (error) {\n        console.log(error);\n        price = \"No price available.\";\n      }\n      console.log(price)\n      if (price == \"No price available.\" || price == \"This is a seasonal route that is currently not being served.\")\n        return price;\n      else\n        return '$' + price\n    },\n    createMarker(dest) {\n      let wjIcon = L.icon({\n        iconUrl: this.icon,\n        iconSize: this.iconSize\n      });\n\n      let marker = L.marker(this.latLng(dest.latitude, dest.longitude), { icon: wjIcon, dest: dest });\n\n      marker.on('click', this.openPopup)\n      marker.bindTooltip(\"Test Label\",\n        {\n          permanent: true,\n          direction: 'right',\n          opacity: 0.25,\n         \n        });\n      return marker;\n    }\n  },\n  mounted() {\n\n    this.getLocation();\n    //console.log(this.dests)\n    var map = L.map(\"map\").setView([47.313220, -1.319482], 4);\n\n    L.tileLayer(\n      \"https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png\",\n      {\n        minZoom: 4,\n        maxZoom: 7,\n        attribution: 'Maps <a href=&copy; https://www.thunderforest.com/>Thunderforest</a>, Data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap Contributors</a>'\n      }\n    ).addTo(map);\n\n    let markers = L.markerClusterGroup();\n\n    // create a marker for each airport\n    for (let dest of this.dests) {\n\n      let marker = this.createMarker(dest)\n      markers.addLayer(marker)\n\n    }\n\n    map.addLayer(markers);\n  }\n};\n</script>\n  \n<style>\n.leaflet-container {\n  border-radius: 25px;\n}\n\n.search-overlay {\n  position: absolute;\n  top: 0;\n  left: -100px;\n  width: 75%;\n  height: 12%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 999;\n}\n\ninput[type=\"text\"] {\n  padding: 10px;\n  border-radius: 5px;\n  border: none;\n  outline: none;\n  font-size: 16px;\n  background-color: white;\n  width: 50%;\n}\n</style>\n\n    \n    "]},"metadata":{},"sourceType":"module","externalDependencies":[]}